// useActionBar.ts
import { computed, h, ref, shallowRef, type VNode } from 'vue';

/**
 * Represents an action with a name and an associated callback function.
 *
 * This type is used to define objects that consist of:
 * - A name representing the identifier or label for the action.
 * - A callback function that executes the desired functionality when invoked.
 */
export type TAction = { name: string; buttonVariant?: string; callback: () => void };

// a render function that returns a VNode, or null
/**
 * Represents a function that is used to render virtual DOM nodes.
 *
 * This function is intended to return a VNode, which typically represents
 * a virtual representation of a DOM element in libraries such as Vue, React, or similar.
 *
 * @typedef {Function} RenderFn
 * @returns {VNode} The virtual node generated by the render function.
 */
type RenderFn = () => VNode;

/**
 * A reactive variable that holds an array of actions.
 *
 * @type {Ref<TAction[]>}
 * @description This variable represents a reactive reference to an array of `TAction` items.
 * It can be used to dynamically track and update a collection of actions in a reactive
 * framework or environment.
 */
const actions = ref<TAction[]>([]);
/**
 * A reactive reference that can hold either a render function (`RenderFn`)
 * or `null`. Primarily used for managing and updating render functions
 * within the framework. By being shallow, reactivity is applied only to
 * the reference itself and not to its internal properties or structure.
 *
 * @type {import('vue').ShallowRef<RenderFn | null>}
 */
const description = shallowRef<RenderFn | null>(null);

/**
 * Provides functionalities to manage an action bar including actions and descriptions.
 *
 * @return {Object} An object containing the following properties and methods:
 * - `actions`: A reactive value holding the list of actions.
 * - `description`: A reactive value holding the description renderer or null.
 * - `setDescription(render)`: Sets the description renderer or clears it by passing null.
 */

const subTitle = ref<string>('');

export function useActionBar() {
  function setActions(newActions: TAction | TAction[]): void {
    actions.value = Array.isArray(newActions) ? newActions : [newActions];
  }

  function setDescription(render: RenderFn | string | null): void {
    description.value =
      typeof render === 'string' ? () => h('div', render) : render;
  }

  function setSubtitle(subtitle: string){
    subTitle.value = subtitle;
  }

  function reset():void{
    actions.value = [];
    description.value = null;
    subTitle.value = '';
  }

  const hasContent = computed(() => description.value !== null && actions.value.length > 0);

  return { actions, description, subTitle, hasContent, setActions, setDescription, setSubtitle, reset };
}
